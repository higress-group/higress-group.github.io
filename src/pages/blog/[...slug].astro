---
import { type CollectionEntry, getCollection } from "astro:content";
import BlogPost from "@components/markdownSet/MarkdownDetail.astro";
import TocComponent from "@components/markdownSet/TocComponents/TocComponent.astro";
import BaseLayout from "@layouts/BaseLayout.astro";
import { Button } from "@serverless-cd/goat-ui";
import { Icon } from "@astrojs/starlight/components";
import Sidebar from "@components/starlight/Sidebar.astro";
import { useTranslations } from "@i18n/util";
import { SITE } from "@utils/config";
import Pagination from "@astrojs/starlight/components/Pagination.astro";

const t = useTranslations(Astro);

export async function getStaticPaths() {
  const posts = await getCollection("blog");
  return posts.map((post) => ({
    params: { slug: post.slug },
    props: post,
  }));
}

const blogArticle = {
  article: "blog.article.technical",
  case: "blog.article.case.best.practices",
  ecosystem: "blog.article.ecosystem.articles",
  announcement: "blog.activity.community.announcement",
  release: "blog.activity.release.statement",
  committer: "page.blog.news.personnel.promotion",
  cooperate: "page.blog.news.community.cooperation",
  "activity-preview": "blog.activity.preview.event",
  "activity-detail": "blog.activity.detail.event",
};

type Props = CollectionEntry<"blog">;

const post = Astro.props;

const { Content, headings } = await post.render();

const posts = await getCollection("blog");

const sortedPosts = posts.sort(
  (a, b) => new Date(b.data.date).valueOf() - new Date(a.data.date).valueOf(),
);

const articlePosts = [
  {
    type: "group",
    label: blogArticle[post.data.category]
      ? t(blogArticle[post.data.category])
      : post.data.category,
    entries: [],
  },
];

let currentIndex;

sortedPosts.forEach((item) => {
  if (item.data.category === post.data.category) {
    if (post.id === item.id) currentIndex = articlePosts[0].entries.length;
    articlePosts[0].entries.push({
      type: "link",
      label: item.data.title,
      href: `/blog/${item.slug}/`,
      isCurrent: post.id === item.id,
      attrs: {},
    });
  }
});

const prev = articlePosts[0].entries[currentIndex - 1];
const next = articlePosts[0].entries[currentIndex + 1];
const baseLayout_title = post?.data?.title || `${SITE.name} Blog`;
const description = post?.data?.description || "";
const keywords = post?.data?.keywords || [];
---

<span class="blog-slug-wrapper">
  <BaseLayout
    align="docs"
    title={baseLayout_title}
    description={description}
    keywords={keywords}
    channel={t("commmon.header.comm.blog")}
  >
    <div class="w-full">
      <div
        class="w-[20%] sidebar-content fixed overflow-auto h-full hidden 2xl:inline-block xl:inline-block lg:inline-block md:inline-block"
      >
        <Sidebar sidebar={articlePosts} />
      </div>
      <div
        class="blog-slug-container w-full 2xl:ml-[20%] xl:ml-[20%] lg:ml-[20%] md:ml-[20%] md:w-[80%] inline-block"
      >
        <div id="back-btn" class="pt-4 pl-6">
          <Button variant="secondary" target="_self" class="rounded-3xl">
            <Icon name="left-arrow" class="text-lg align-middle" />
            <span class="ml-0.5">BACK</span>
          </Button>
        </div>
        <BlogPost {...post.data}>
          <Content />
        </BlogPost>
        <div class="pb-6">
          {
            (prev || next) && (
              <Pagination
                labels={{
                  "page.previousLink": t("commmon.base.page.previousLink"),
                  "page.nextLink": t("commmon.base.page.nextLink"),
                }}
                pagination={{
                  prev: prev,
                  next: next,
                }}
              />
            )
          }
        </div>
      </div>
      <div
        class="right-sidebar-panel fixed h-full hidden 2xl:inline-block xl:inline-block"
      >
        <div id="toggle-sidebar">
          <Button variant="secondary" id="toggle-btn" class="px-2">
            <Icon
              name="right-caret"
              class="right_caret text-lg align-middle rotate-180"
            />
          </Button>
        </div>
        <TocComponent headings={headings} />
      </div>
    </div>
  </BaseLayout>
</span>
<script>
  function addBackBtnClick() {
    const url = new URL(window.location.href);
    let source = url.searchParams.get("source");
    if (source) {
      source = source.replace(/_/g, "/");
    }
    const backBtn: HTMLAnchorElement = document.querySelector("#back-btn a");
    if (backBtn) {
      backBtn.onclick = (e) => {
        e.preventDefault();
        const params = new URLSearchParams(window.location.search);
        params.delete("source");

        let newPathname = "";
        if (source && source !== "undefined") {
          newPathname = `/${source}/`;
        } else {
          newPathname = "/blog/";
        }
        const newUrl = `${newPathname}${params.toString() ? `?${params.toString()}` : ""}`;

        window.location.href = newUrl;
      };
    }
  }
  	// 折叠侧边栏
	function toggleSidebar() {
		const toggleBtn = document.getElementById("toggle-btn");
		if (toggleBtn) {
			toggleBtn.onclick = (e) => {
				e.preventDefault();
				const sidebar = document.querySelector(
					".right-sidebar-panel",
				);
				const slContainer = document.querySelector(
					".blog-slug-container",
				);
				const toggleIcon = document.querySelector(
					"#toggle-btn .right_caret",
				);

				if (sidebar.classList.contains("collapsed")) {
					sidebar.classList.remove("collapsed");
					toggleIcon.classList.remove("rotate");
					slContainer.classList.remove("blog-fold");
				} else {
					sidebar.classList.add("collapsed");
					toggleIcon.classList.add("rotate");
					slContainer.classList.add("blog-fold");
				}
			};
		}
	}

	document.addEventListener("astro:page-load", toggleSidebar);
	document.addEventListener("DOMContentLoaded", toggleSidebar);
  document.addEventListener("astro:page-load", addBackBtnClick);
  document.addEventListener("DOMContentLoaded", addBackBtnClick);
</script>

<style is:global>
  .blog-slug-wrapper {
    .sidebar-content {
      height: 100%;
      padding: 1rem var(--sl-sidebar-pad-x) 0;
      flex-direction: column;
      gap: 1rem;
    }
    .right-sidebar-panel {
      flex-direction: column;
      justify-content: space-between;
      height: calc(100vh - 3.5rem);
      /* padding: 1rem var(--sl-sidebar-pad-x); */
      width: 0px;
      overflow: hidden;
    }
    .right-sidebar-panel h2 {
      color: var(--sl-color-white);
      font-size: var(--sl-text-h5);
      font-weight: 600;
      line-height: var(--sl-line-height-headings);
      margin-bottom: 0.5rem;
    }
    .right-sidebar-panel a {
      display: block;
      font-size: var(--sl-text-xs);
      text-decoration: none;
      color: var(--sl-color-gray-3);
      overflow-wrap: anywhere;
    }
    .right-sidebar-panel a:hover {
      color: var(--sl-color-white);
    }
    #toggle-sidebar {
      display: none;
    }
    @media (min-width: 72rem) {
      #toggle-sidebar {
        display: block;
        position: fixed;
        top: 40%;
        z-index: 2;
        transform: translateX(-35px);
        a{
          padding-top: 8px;
        }
      }
      .rotate {
        transform: rotate(0deg);
      }
      .collapsed {
        width: 18%;
        padding: 1rem var(--sl-sidebar-pad-x);
      }
      .blog-fold{
        width: 60% !important;
      }
    }
  }
</style>
