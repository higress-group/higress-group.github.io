---
import { type CollectionEntry, getCollection } from "astro:content";
import BlogPost from "@components/markdownSet/MarkdownDetail.astro";
import TocComponent from "@components/markdownSet/TocComponents/TocComponent.astro";
import AIBaseLayout from "@layouts/AIBaseLayout.astro";
import { sidebarData } from "@/pages/ai/sidebar";
import Sidebar from "@components/starlight/Sidebar.astro";
import { useTranslations } from "@i18n/util";
import { SITE } from "@utils/config";
import Pagination from "@astrojs/starlight/components/Pagination.astro";

const t = useTranslations(Astro);

export async function getStaticPaths() {
	const posts = await getCollection("ai");
	return posts.map((post) => ({
		params: { slug: post.slug },
		props: post,
	}));
}

type Props = CollectionEntry<"ai">;

const post = Astro.props;

const { Content, headings } = await post.render();

const posts = await getCollection("ai");

const sortedPosts = posts.sort(
	(a, b) => new Date(b.data.date).valueOf() - new Date(a.data.date).valueOf(),
);

const articlePosts = JSON.parse(JSON.stringify(sidebarData));


sortedPosts.forEach((item) => {
	if (item.data.category === post.data.category) {
		articlePosts[0].entries.forEach((entries)=>{
			if(entries.type === "group" && (item.slug.split("/")[0] === entries.fileName)) {
				entries.entries.unshift({
					type: "link",
					label: item.data.title,
					href: `/ai/${item.slug}/`,
					isCurrent: post.id === item.id,
					attrs: {},
				});
			};
			if (item.slug.split("/").length === 1) {
				if (!articlePosts[0].entries.some(entry => entry.label === item.data.title)) {
					articlePosts[0].entries.unshift({
						type: "link",
						label: item.data.title,
						href: `/ai/${item.slug}/`,
						isCurrent: post.id === item.id,
						attrs: {},
					})
				};
			};
		})
	}
});

const PaginationList = [];
articlePosts[0].entries?.forEach((item) => {
	if(item.type !== "group") {
		PaginationList.push(item);
	} else {
		item.entries.forEach((item) => {
			PaginationList.push(item);
		})
	}
});
let currentIndex = PaginationList.findIndex((item) => item.isCurrent);
let prev = PaginationList[currentIndex - 1];
let next = PaginationList[currentIndex + 1];
const baseLayout_title = post?.data?.title || `${SITE.name} Blog`;
const description = post?.data?.description || "";
---

<span class="blog-slug-wrapper">
	<AIBaseLayout 
		align="docs" 
		title={baseLayout_title} 
		description={description}
   		channel={"AI"}
	>
		<div class="w-full">
			<div
				class="w-[20%] sidebar-content fixed overflow-auto h-full hidden 2xl:inline-block xl:inline-block lg:inline-block md:inline-block"
			>
				<!-- @ts-ignore -->
				<Sidebar sidebar={articlePosts} />
			</div>
			<div
				class="w-full 2xl:ml-[20%] xl:ml-[20%] lg:ml-[20%] md:ml-[20%] 2xl:w-[60%] xl:w-[60%] lg:w-[80%] md:w-[80%] inline-block"
			>
				<BlogPost {...post.data}>
					<Content />
				</BlogPost>
				<div class="pb-6">
					{
						(prev || next) && (
							//  @ts-ignore
							<Pagination
								labels={{
									"page.previousLink": t("commmon.base.page.previousLink"),
									"page.nextLink": t("commmon.base.page.nextLink"),
								}}
								pagination={{
									prev: prev,
									next: next,
								}}
							/>
						)
					}
				</div>
			</div>
			<div
				class="right-sidebar-panel w-[18%] fixed h-full hidden 2xl:inline-block xl:inline-block"
			>
				<TocComponent headings={headings} />
			</div>
		</div>
	</AIBaseLayout>
</span>
<script>
	function addBackBtnClick() {
		const url = new URL(window.location.href);
		let source = url.searchParams.get("source");
		if (source) {
			source = source.replace(/_/g, "/");
		}
		const backBtn: HTMLAnchorElement =
			document.querySelector("#back-btn a");
		if (backBtn) {
			backBtn.onclick = (e) => {
				e.preventDefault();
				const params = new URLSearchParams(window.location.search);
				params.delete("source");

				let newPathname = "";
				if (source && source !== "undefined") {
					newPathname = `/${source}/`;
				} else {
					newPathname = "/ai/";
				}
				const newUrl = `${newPathname}?${params.toString()}`;

				window.location.href = newUrl;
			};
		}
	}
	document.addEventListener("astro:page-load", addBackBtnClick);
	document.addEventListener("DOMContentLoaded", addBackBtnClick);
</script>

<style is:global>
	.blog-slug-wrapper {
		.sidebar-content {
			height: 100%;
			padding: 1rem var(--sl-sidebar-pad-x) 0;
			flex-direction: column;
			gap: 1rem;
		}
		.right-sidebar-panel {
			flex-direction: column;
			justify-content: space-between;
			height: calc(100vh - 3.5rem);
			padding: 1rem var(--sl-sidebar-pad-x);
		}
		.right-sidebar-panel h2 {
			color: var(--sl-color-white);
			font-size: var(--sl-text-h5);
			font-weight: 600;
			line-height: var(--sl-line-height-headings);
			margin-bottom: 0.5rem;
		}
		.right-sidebar-panel a {
			display: block;
			font-size: var(--sl-text-xs);
			text-decoration: none;
			color: var(--sl-color-gray-3);
			overflow-wrap: anywhere;
		}
		.right-sidebar-panel a:hover {
			color: var(--sl-color-white);
		}
	}
</style>
