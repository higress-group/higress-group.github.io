{
  "filename": "deploy-by-helm.md",
  "__html": "<h1>安装部署</h1>\n<p><a href=\"https://helm.sh/\">Helm</a> 是一个用于自动化管理和发布 Kubernetes 软件的包管理系统。通过 Helm 可以在您的 Kubernetes 集群上快速部署安装 Higress 网关。</p>\n<h2>安装 Higress</h2>\n<p>Higress 网关由控制面组件 <code>higress-controller</code> 和数据面组件 <code>higress-gateway</code> 组成。Istio 负责管理<strong>数据平面的 API 配置</strong>，<code>higress-controller</code> 负责管理<strong>控制平面的 API 配置</strong>。</p>\n<h3>Helm 安装命令</h3>\n<pre><code class=\"language-bash\">kubectl create ns higress-system\nhelm install higress -n higress-system  oci://higress-registry.cn-hangzhou.cr.aliyuncs.com/charts/higress\n</code></pre>\n<h3>安装参数</h3>\n<ol>\n<li>enableStatus</li>\n</ol>\n<p>为避免从 Nginx Ingress 迁移过程中，覆盖 Ingress 对象的 status 字段，Higress 默认不会将入口 IP 写入 Ingress 的 status。</p>\n<p>可以通过 <code>--set enableStatus=true</code> 启用此功能。</p>\n<ol start=\"2\">\n<li>ingressClass</li>\n</ol>\n<p>在集群内部署了多个网关时，可以基于 <a href=\"https://kubernetes.io/zh-cn/docs/concepts/services-networking/ingress/#ingress-class\">IngressClass</a> 区分每个网关的职责范围。</p>\n<p>可以通过 <code>--set ingressClass=&lt;name&gt;</code> 指定 Higress 监听哪些 Ingress。</p>\n<ol start=\"3\">\n<li>watchNamespace</li>\n</ol>\n<p>当基于 K8s 命名空间进行业务系统隔离时，若需要对每个命名空间部署一套独立的网关，可以通过 watchNamespace 限制 Higress 监听此命名空间内的 Ingress。</p>\n<p>可以通过 <code>--set watchNamespace=&lt;namespace&gt;</code> 指定。</p>\n<h2>安装 Istio，开启 Service Mesh 模式 （可选）</h2>\n<p>Higress 网关可以通过<a href=\"https://istio.io/\">Istio</a> 统一管理数据平面的 API 配置。可以选择部署 Higress 发行的 Istio 版本，也可以选择 Istio 官方提供的标准版本。\n两种模式下的能力对比可以参考<a href=\"../user/annotation.md\">Higress Anntotaion 支持说明</a>。</p>\n<p>这种模式下，需要更新 Higress 的部署参数：</p>\n<pre><code class=\"language-bash\">helm upgrade higress -n higress-system --<span class=\"hljs-built_in\">set</span> global.enableMesh=<span class=\"hljs-literal\">true</span> oci://higress-registry.cn-hangzhou.cr.aliyuncs.com/charts/higress \n</code></pre>\n<h3>选项1. 安装 Higress Istio（推荐）</h3>\n<p>安装后，<code>istiod</code> 需要等待 Higress 完成部署完成，才会处于就绪状态。</p>\n<pre><code class=\"language-bash\">kubectl create ns istio-system\nhelm install istio -n istio-system oci://higress-registry.cn-hangzhou.cr.aliyuncs.com/charts/istio\n</code></pre>\n<h2><strong>注意</strong></h2>\n<p>若 Higress 网关没有安装在默认的 <code>higress-system</code> 的命名空间，需要在安装 Higress Istio 时指定通过 <code>--set global.higressNamespace=</code> 指定命名空间，如:</p>\n<pre><code class=\"language-bash\">helm install istio -n istio-system --<span class=\"hljs-built_in\">set</span> global.higressNamespace=foo oci://higress-registry.cn-hangzhou.cr.aliyuncs.com/charts/istio\n</code></pre>\n<hr>\n<h3>选项2. 安装标准版 Istio</h3>\n<p>请参考 Istio 官网的<a href=\"https://istio.io/latest/zh/docs/setup/install/\">安装文档</a></p>\n<p>与 Higress Istio 不同，标准版 Istio 不会从自动从 Higress Controller 获取配置，需要配置<a href=\"https://istio.io/latest/docs/reference/config/istio.mesh.v1alpha1/#ConfigSource\">MeshConfig.ConfigSource</a></p>\n<p>以通过 istioctl 部署为例：</p>\n<pre><code class=\"language-yaml\"><span class=\"hljs-comment\"># my-config.yaml</span>\n<span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">install.istio.io/v1alpha1</span>\n<span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">IstioOperator</span>\n<span class=\"hljs-attr\">spec:</span>\n  <span class=\"hljs-attr\">meshConfig:</span>\n    <span class=\"hljs-attr\">configSources:</span>\n    <span class=\"hljs-comment\"># 当有多个配置来源时，需要显示指定 k8s 来源</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">address:</span> <span class=\"hljs-string\">\"k8s://\"</span>\n    <span class=\"hljs-comment\"># 假设 Higress 安装在 higress-system 命名空间</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">address:</span> <span class=\"hljs-string\">\"xds://higress-controller.higress-system:15051\"</span>\n    <span class=\"hljs-comment\"># 若在不同命名空间安装了多个 Higress ，可以继续添加</span>\n</code></pre>\n<p>执行安装操作：</p>\n<pre><code class=\"language-bash\">istioctl install -f my-config.yaml\n</code></pre>\n<h3>关闭 Service Mesh 模式</h3>\n<p>先更新 Higress 的部署参数，并等待 Higress 就绪：</p>\n<pre><code class=\"language-bash\">helm upgrade higress -n higress-system --<span class=\"hljs-built_in\">set</span> global.enableMesh=<span class=\"hljs-literal\">false</span> oci://higress-registry.cn-hangzhou.cr.aliyuncs.com/charts/higress\nkubectl <span class=\"hljs-built_in\">wait</span> -n higress-system deployment/higress-controller deployment/higress-gateway --<span class=\"hljs-keyword\">for</span>=condition=Available\n</code></pre>\n<p>删除 istio 以及对应的 crd</p>\n<pre><code class=\"language-bash\">helm delete istio -n istio-system\nkubectl delete ns istio-system\nkubectl get crd -oname | grep --color=never <span class=\"hljs-string\">'istio.io'</span> | xargs kubectl delete\n</code></pre>\n",
  "link": "/zh-cn/docs/ops/deploy-by-helm.html",
  "meta": {
    "title": "安装部署",
    "keywords": "Deploy",
    "description": "Higress Helm部署."
  }
}