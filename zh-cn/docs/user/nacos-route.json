{
  "filename": "nacos-route.md",
  "__html": "<h1>配置 Ingress 转发给注册在 Nacos 的服务</h1>\n<h2>配置服务来源</h2>\n<pre><code class=\"language-yaml\"><span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">networking.higress.io/v1</span>\n<span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">McpBridge</span>\n<span class=\"hljs-attr\">metadata:</span>\n  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">default</span>\n  <span class=\"hljs-attr\">namespace:</span> <span class=\"hljs-string\">higress-system</span>\n<span class=\"hljs-attr\">spec:</span>\n  <span class=\"hljs-attr\">registries:</span>\n    <span class=\"hljs-comment\"># 定义一个名为 “production” 的服务来源</span>\n  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">production</span>\n    <span class=\"hljs-comment\"># 注册中心类型是 Nacos 2.x，支持 gRPC 协议</span>\n    <span class=\"hljs-attr\">type:</span> <span class=\"hljs-string\">nacos2</span>\n    <span class=\"hljs-comment\"># 注册中心的访问地址，可以是域名或者IP</span>\n    <span class=\"hljs-attr\">domain:</span> <span class=\"hljs-number\">192.</span><span class=\"hljs-string\">xxx.xx.32</span>\n    <span class=\"hljs-comment\"># 注册中心的访问端口，Nacos 默认都是 8848</span>\n    <span class=\"hljs-attr\">port:</span> <span class=\"hljs-number\">8848</span>\n    <span class=\"hljs-comment\"># Nacos 命名空间 ID</span>\n    <span class=\"hljs-attr\">nacosNamespaceId:</span> <span class=\"hljs-string\">d8ac64f3-xxxx-xxxx-xxxx-47a814ecf358</span>\n    <span class=\"hljs-comment\"># Nacos 服务分组</span>\n    <span class=\"hljs-attr\">nacosGroups:</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">DEFAULT_GROUP</span>\n    <span class=\"hljs-comment\"># 定义一个名为 “uat” 的服务来源</span>\n  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">uat</span>\n    <span class=\"hljs-comment\"># 注册中心类型是 Nacos 1.x，只支持 HTTP 协议</span>\n    <span class=\"hljs-attr\">type:</span> <span class=\"hljs-string\">nacos</span>\n    <span class=\"hljs-comment\"># 注册中心的访问地址，可以是域名或者IP</span>\n    <span class=\"hljs-attr\">domain:</span> <span class=\"hljs-number\">192.</span><span class=\"hljs-string\">xxx.xx.31</span>\n    <span class=\"hljs-comment\"># 注册中心的访问端口，Nacos 默认都是 8848</span>\n    <span class=\"hljs-attr\">port:</span> <span class=\"hljs-number\">8848</span>\n    <span class=\"hljs-comment\"># Nacos 命名空间 ID</span>\n    <span class=\"hljs-attr\">nacosNamespaceId:</span> <span class=\"hljs-string\">98ac6df3-xxxx-xxxx-xxxx-ab98115dfde4</span>\n    <span class=\"hljs-comment\"># Nacos 服务分组</span>\n    <span class=\"hljs-attr\">nacosGroups:</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">DEFAULT_GROUP</span>\n</code></pre>\n<p>通过<a href=\"./mcp-bridge.md\">McpBridge</a>资源配置了两个服务来源，分别取名 “production”和“uat”，需要注意的是 Higress 对接 Nacos 同时支持 HTTP 和 gRPC 两种协议，建议将 Nacos 升级到 2.x 版本，这样可以在上述配置的 type 中指定 “nacos2” 使用 gRPC 协议，从而更快速地感知到服务变化，并消耗更少的 Nacos 服务端资源。\n基于 McpBridge 中的 registries 数组配置，Higress 可以轻松对接多个且不同类型的服务来源（Nacos/Zookeeper/Eureka/Consul/...），这里对于 Nacos 类型的服务来源，支持配置多个不同命名空间，从而实现不同命名空间的微服务可以共用一个网关，降低自建微服务网关的资源成本开销。</p>\n<h2>配置 Ingress</h2>\n<pre><code class=\"language-yaml\"><span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">networking.k8s.io/v1</span>\n<span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">Ingress</span>\n<span class=\"hljs-attr\">metadata:</span>\n  <span class=\"hljs-attr\">annotations:</span>\n    <span class=\"hljs-attr\">higress.io/destination:</span> <span class=\"hljs-string\">service-provider.DEFAULT-GROUP.d8ac64f3-xxxx-xxxx-xxxx-47a814ecf358.nacos</span>\n  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">demo</span>\n  <span class=\"hljs-attr\">namespace:</span> <span class=\"hljs-string\">default</span>\n<span class=\"hljs-attr\">spec:</span>\n  <span class=\"hljs-attr\">rules:</span>\n  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">http:</span>\n      <span class=\"hljs-attr\">paths:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">backend:</span>\n          <span class=\"hljs-attr\">resource:</span>\n            <span class=\"hljs-attr\">apiGroup:</span> <span class=\"hljs-string\">networking.higress.io</span>\n            <span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">McpBridge</span>\n            <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">default</span>\n        <span class=\"hljs-attr\">path:</span> <span class=\"hljs-string\">/</span>\n        <span class=\"hljs-attr\">pathType:</span> <span class=\"hljs-string\">Prefix</span>\n</code></pre>\n<p>和常见的 Ingress 在 backend 中定义 service 不同，这里基于 Ingress 的 resource backend 将上面定义服务来源的 McpBridge 进行关联。并通过注解<code>higress.io/destination</code>指定路由最终要转发到的目标服务。</p>\n<p>对于 Nacos 来源的服务，这里的目标服务格式为：“服务名称.服务分组.命名空间ID.nacos”，注意这里需要遵循 DNS 域名格式，因此服务分组中的下划线'_'被转换成了横杠'-'。</p>\n",
  "link": "/zh-cn/docs/user/nacos-route.html",
  "meta": {
    "title": "配置 Ingress 转发给注册在 Nacos 的服务",
    "keywords": "ingress,higress nacos",
    "description": "配置 Ingress 转发给注册在 Nacos 的服务"
  }
}