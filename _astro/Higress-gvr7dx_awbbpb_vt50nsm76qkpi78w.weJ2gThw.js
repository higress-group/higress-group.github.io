import{c as d,__tla as c}from"./astro-component.B3fYMMDi.js";import{r as o,m as E,u as y,__tla as v}from"./constant.B9AWHwfy.js";import{__tla as S}from"./astro/assets-service.DmDXK_Mj.js";let e,p,a,n,i,r,t,f=Promise.all([(()=>{try{return c}catch{}})(),(()=>{try{return v}catch{}})(),(()=>{try{return S}catch{}})()]).then(async()=>{let s;s=`<p>MCP\uFF08Model Context Protocol\uFF09\u534F\u8BAE\u662F\u4E00\u4E2A\u7528\u4E8E AI \u6A21\u578B\u548C\u5DE5\u5177\u4E4B\u95F4\u901A\u4FE1\u7684\u6807\u51C6\u534F\u8BAE\u3002\u968F\u7740 AI \u5E94\u7528\u53D8\u5F97\u8D8A\u6765\u8D8A\u590D\u6742\u5E76\u88AB\u5E7F\u6CDB\u90E8\u7F72\uFF0C\u539F\u6709\u7684\u901A\u4FE1\u673A\u5236\u9762\u4E34\u7740\u4E00\u7CFB\u5217\u6311\u6218\u3002\u8FD1\u671F MCP \u4ED3\u5E93\u7684 <a href="https://github.com/modelcontextprotocol/modelcontextprotocol/pull/206" referrerpolicy="unsafe-url" rel="nofollow" target="_blank">PR #206</a> <em>[1]</em> \u5F15\u5165\u4E86\u4E00\u4E2A\u5168\u65B0\u7684 Streamable HTTP \u4F20\u8F93\u5C42\u66FF\u4EE3\u539F\u6709\u7684 HTTP+SSE \u4F20\u8F93\u5C42\u3002\u672C\u6587\u5C06\u8BE6\u7EC6\u5206\u6790\u8BE5\u534F\u8BAE\u7684\u6280\u672F\u7EC6\u8282\u548C\u5B9E\u9645\u4F18\u52BF\u3002</p>
<h2 id="\u8981\u70B9\u901F\u89C8">\u8981\u70B9\u901F\u89C8</h2>
<ul>
<li>Streamable HTTP \u76F8\u6BD4 HTTP + SSE \u5177\u6709\u66F4\u597D\u7684\u7A33\u5B9A\u6027\uFF0C\u5728\u9AD8\u5E76\u53D1\u573A\u666F\u4E0B\u8868\u73B0\u66F4\u4F18\u3002</li>
<li>Streamable HTTP \u5728\u6027\u80FD\u65B9\u9762\u76F8\u6BD4 HTTP + SSE \u5177\u6709\u660E\u663E\u4F18\u52BF\uFF0C\u54CD\u5E94\u65F6\u95F4\u66F4\u77ED\u4E14\u66F4\u7A33\u5B9A\u3002</li>
<li>Streamable HTTP \u5BA2\u6237\u7AEF\u5B9E\u73B0\u76F8\u6BD4 HTTP + SSE \u66F4\u7B80\u5355\uFF0C\u4EE3\u7801\u91CF\u66F4\u5C11\uFF0C\u7EF4\u62A4\u6210\u672C\u66F4\u4F4E\u3002</li>
</ul>
<h2 id="\u4E3A\u4EC0\u4E48\u9009\u62E9-streamable-http">\u4E3A\u4EC0\u4E48\u9009\u62E9 Streamable HTTP?</h2>
<p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2025/png/141456689/1745394032558-45a9789a-e07a-4ecb-a8b5-3629197d9b4b.png" alt="" referrerpolicy="no-referrer"></p>
<h3 id="http--sse-\u5B58\u5728\u7684\u95EE\u9898">HTTP + SSE \u5B58\u5728\u7684\u95EE\u9898</h3>
<p>HTTP+SSE\u7684\u4F20\u8F93\u8FC7\u7A0B\u5B9E\u73B0\u4E2D\uFF0C\u5BA2\u6237\u7AEF\u548C\u670D\u52A1\u5668\u901A\u8FC7\u4E24\u4E2A\u4E3B\u8981\u6E20\u9053\u8FDB\u884C\u901A\u4FE1\uFF1A\uFF081\uFF09HTTP \u8BF7\u6C42/\u54CD\u5E94\uFF1A\u5BA2\u6237\u7AEF\u901A\u8FC7\u6807\u51C6\u7684 HTTP \u8BF7\u6C42\u5411\u670D\u52A1\u5668\u53D1\u9001\u6D88\u606F\u3002 \uFF082\uFF09\u670D\u52A1\u5668\u53D1\u9001\u4E8B\u4EF6\uFF08SSE\uFF09\uFF1A\u670D\u52A1\u5668\u901A\u8FC7\u4E13\u95E8\u7684 /sse \u7AEF\u70B9\u5411\u5BA2\u6237\u7AEF\u63A8\u9001\u6D88\u606F\uFF0C\u8FD9\u5C31\u5BFC\u81F4\u5B58\u5728\u4E0B\u9762\u4E09\u4E2A\u95EE\u9898\uFF1A</p>
<ul>
<li><strong>\u670D\u52A1\u5668\u5FC5\u987B\u7EF4\u62A4\u957F\u8FDE\u63A5</strong>\uFF0C\u5728\u9AD8\u5E76\u53D1\u60C5\u51B5\u4E0B\u4F1A\u5BFC\u81F4\u663E\u8457\u7684\u8D44\u6E90\u6D88\u8017\u3002</li>
<li><strong>\u670D\u52A1\u5668\u6D88\u606F\u53EA\u80FD\u901A\u8FC7 SSE \u4F20\u9012</strong>\uFF0C\u9020\u6210\u4E86\u4E0D\u5FC5\u8981\u7684\u590D\u6742\u6027\u548C\u5F00\u9500\u3002</li>
<li><strong>\u57FA\u7840\u67B6\u6784\u517C\u5BB9\u6027</strong>\uFF0C\u8BB8\u591A\u73B0\u6709\u7684\u7F51\u7EDC\u57FA\u7840\u67B6\u6784\u53EF\u80FD\u65E0\u6CD5\u6B63\u786E\u5904\u7406\u957F\u671F\u7684 SSE \u8FDE\u63A5\u3002\u4F01\u4E1A\u9632\u706B\u5899\u53EF\u80FD\u4F1A\u5F3A\u5236\u7EC8\u6B62\u8D85\u65F6\u8FDE\u63A5\uFF0C\u5BFC\u81F4\u670D\u52A1\u4E0D\u53EF\u9760\u3002</li>
</ul>
<h3 id="streamable-http-\u7684\u6539\u8FDB">Streamable HTTP \u7684\u6539\u8FDB</h3>
<p>Streamable HTTP \u662F MCP \u534F\u8BAE\u7684\u4E00\u6B21\u91CD\u8981\u5347\u7EA7\uFF0C\u901A\u8FC7\u4E0B\u9762\u7684\u6539\u8FDB\u89E3\u51B3\u4E86\u539F\u6709 HTTP + SSE \u4F20\u8F93\u65B9\u5F0F\u7684\u591A\u4E2A\u5173\u952E\u95EE\u9898\uFF1A</p>
<ul>
<li><strong>\u7EDF\u4E00\u7AEF\u70B9</strong>\uFF1A\u79FB\u9664\u4E86\u4E13\u95E8\u5EFA\u7ACB\u8FDE\u63A5\u7684 /sse \u7AEF\u70B9\uFF0C\u5C06\u6240\u6709\u901A\u4FE1\u6574\u5408\u5230\u7EDF\u4E00\u7684\u7AEF\u70B9\u3002</li>
<li><strong>\u6309\u9700\u6D41\u5F0F\u4F20\u8F93</strong>\uFF1A\u670D\u52A1\u5668\u53EF\u4EE5\u7075\u6D3B\u9009\u62E9\u8FD4\u56DE\u6807\u51C6 HTTP \u54CD\u5E94\u6216\u901A\u8FC7 SSE \u6D41\u5F0F\u8FD4\u56DE\u3002</li>
<li><strong>\u72B6\u6001\u7BA1\u7406</strong>\uFF1A\u5F15\u5165session\u673A\u5236\u4EE5\u652F\u6301\u72B6\u6001\u7BA1\u7406\u548C\u6062\u590D\u3002</li>
</ul>
<h2 id="http--sse-vs-streamable-http">HTTP + SSE vs Streamable HTTP</h2>
<p>\u4E0B\u9762\u901A\u8FC7\u5B9E\u9645\u5E94\u7528\u573A\u666F\u4E2D\u7A33\u5B9A\u6027\uFF0C\u6027\u80FD\u548C\u5BA2\u6237\u7AEF\u590D\u6742\u5EA6\u4E09\u4E2A\u89D2\u5EA6\u5BF9\u6BD4\u8BF4\u660E Streamable HTTP \u76F8\u6BD4 HTTP + SSE\u7684\u4F18\u52BF\uFF0CAI \u7F51\u5173 Higress \u76EE\u524D\u5DF2\u7ECF\u652F\u6301\u4E86 Streamable HTTP \u534F\u8BAE\uFF0C\u901A\u8FC7 MCP \u5B98\u65B9 Python SDK \u7684\u6837\u4F8B Server \u90E8\u7F72\u4E86\u4E00\u4E2A HTTP + SSE \u534F\u8BAE\u7684 MCP Server\uFF0C\u901A\u8FC7 Higress \u90E8\u7F72\u4E86\u4E00\u4E2A Streamable HTTP \u534F\u8BAE\u7684MCP Server\u3002</p>
<h2 id="\u7A33\u5B9A\u6027\u5BF9\u6BD4">\u7A33\u5B9A\u6027\u5BF9\u6BD4</h2>
<h3 id="tcp-\u8FDE\u63A5\u6570\u5BF9\u6BD4">TCP \u8FDE\u63A5\u6570\u5BF9\u6BD4</h3>
<p>\u5229\u7528Python\u7A0B\u5E8F\u6A21\u62DF1000\u4E2A\u7528\u6237\u540C\u65F6\u5E76\u53D1\u8BBF\u95EE\u8FDC\u7A0B\u7684MCP Server\u5E76\u8C03\u7528\u83B7\u53D6\u5DE5\u5177\u5217\u8868\uFF0C\u56FE\u4E2D\u53EF\u4EE5\u770B\u51FA SSE Server\u7684 SSE \u8FDE\u63A5\u65E0\u6CD5\u590D\u7528\u4E14\u9700\u8981\u957F\u671F\u7EF4\u62A4\uFF0C\u9AD8\u5E76\u53D1\u7684\u9700\u6C42\u4E5F\u4F1A\u5E26\u6765 TCP \u8FDE\u63A5\u6570\u7684\u7A81\u589E\uFF0C\u800C Streamable HTTP \u534F\u8BAE\u5219\u53EF\u4EE5\u76F4\u63A5\u8FD4\u56DE\u54CD\u5E94\uFF0C\u591A\u4E2A\u8BF7\u6C42\u53EF\u4EE5\u590D\u7528\u540C\u4E00\u4E2A TCP \u8FDE\u63A5\uFF0CTCP\u8FDE\u63A5\u6570\u6700\u9AD8\u53EA\u5230\u51E0\u5341\u6761\uFF0C\u5E76\u4E14\u6574\u4F53\u6267\u884C\u65F6\u95F4\u4E5F\u53EA\u6709SSE Server \u7684\u56DB\u5206\u4E4B\u4E00\u3002</p>
<p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2025/png/141456689/1745398582733-5f9ba81c-8f2d-45fe-bd52-aa6ea75080e4.png" alt="" referrerpolicy="no-referrer"></p>
<p>\u57281000\u4E2A\u5E76\u53D1\u7528\u6237\u7684\u6D4B\u8BD5\u573A\u666F\u4E0B\uFF0CHigress \u90E8\u7F72\u7684 Streamable HTTP \u65B9\u6848\u7684 TCP \u8FDE\u63A5\u6570\u660E\u663E\u4F4E\u4E8E HTTP + SSE \u65B9\u6848\uFF1A</p>
<ul>
<li>HTTP + SSE\uFF1A\u9700\u8981\u7EF4\u6301\u5927\u91CF\u957F\u8FDE\u63A5\uFF0CTCP\u8FDE\u63A5\u6570\u968F\u65F6\u95F4\u6301\u7EED\u589E\u957F</li>
<li>Streamable HTTP\uFF1A\u6309\u9700\u5EFA\u7ACB\u8FDE\u63A5\uFF0CTCP\u8FDE\u63A5\u6570\u7EF4\u6301\u5728\u8F83\u4F4E\u6C34\u5E73</li>
</ul>
<h3 id="\u8BF7\u6C42\u6210\u529F\u7387\u5BF9\u6BD4">\u8BF7\u6C42\u6210\u529F\u7387\u5BF9\u6BD4</h3>
<p>\u5B9E\u9645\u5E94\u7528\u573A\u666F\u4E2D\u8FDB\u7A0B\u7EA7\u522B\u901A\u5E38\u4F1A\u9650\u5236\u6700\u5927\u8FDE\u63A5\u6570\uFF0Clinux\u9ED8\u8BA4\u901A\u5E38\u662F1024\u3002\u5229\u7528Python\u7A0B\u5E8F\u6A21\u62DF\u4E0D\u540C\u6570\u91CF\u7684\u7528\u6237\u8BBF\u95EE\u8FDC\u7A0B\u7684MCP Server\u5E76\u8C03\u7528\u83B7\u53D6\u5DE5\u5177\u5217\u8868\uFF0CSSE Server\u5728\u5E76\u53D1\u8BF7\u6C42\u6570\u5230\u8FBE\u6700\u5927\u8FDE\u63A5\u6570\u9650\u5236\u540E\uFF0C\u6210\u529F\u7387\u4F1A\u6781\u901F\u4E0B\u964D\uFF0C\u5927\u91CF\u7684\u5E76\u53D1\u8BF7\u6C42\u65E0\u6CD5\u5EFA\u7ACB\u65B0\u7684 SSE \u8FDE\u63A5\u800C\u8BBF\u95EE\u5931\u8D25\u3002</p>
<p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2025/png/141456689/1745392826151-8ed104e6-87aa-4fbc-a024-5afa57091139.png" alt="" referrerpolicy="no-referrer"></p>
<p>\u5728\u4E0D\u540C\u5E76\u53D1\u7528\u6237\u6570\u4E0B\u7684\u8BF7\u6C42\u6210\u529F\u7387\u6D4B\u8BD5\u4E2D\uFF0CHigress \u90E8\u7F72\u7684 Streamable HTTP \u7684\u6210\u529F\u7387\u663E\u8457\u9AD8\u4E8E HTTP + SSE \u65B9\u6848\uFF1A</p>
<ul>
<li>HTTP + SSE\uFF1A\u968F\u7740\u5E76\u53D1\u7528\u6237\u6570\u589E\u52A0\uFF0C\u6210\u529F\u7387\u663E\u8457\u4E0B\u964D</li>
<li>Streamable HTTP\uFF1A\u5373\u4F7F\u5728\u9AD8\u5E76\u53D1\u573A\u666F\u4E0B\u4ECD\u80FD\u4FDD\u6301\u8F83\u9AD8\u7684\u8BF7\u6C42\u6210\u529F\u7387</li>
</ul>
<h2 id="\u6027\u80FD\u5BF9\u6BD4">\u6027\u80FD\u5BF9\u6BD4</h2>
<blockquote>
<p>\u8FD9\u91CC\u5BF9\u6BD4\u7684\u662F\u793E\u533A  Python \u7248\u672C\u7684 <a href="https://github.com/modelcontextprotocol/servers/tree/main/src/github" referrerpolicy="unsafe-url" rel="nofollow" target="_blank">GitHUB MCP Server</a> _ [2]_\u548C Higress MCP \u5E02\u573A\u7684<a href="https://mcp.higress.ai/server/server0011" referrerpolicy="unsafe-url" rel="nofollow" target="_blank"> GitHUB MCP Server</a></p>
</blockquote>
<p>\u5229\u7528 Python \u7A0B\u5E8F\u6A21\u62DF\u4E0D\u540C\u6570\u91CF\u7684\u7528\u6237\u540C\u65F6\u5E76\u53D1\u8BBF\u95EE\u8FDC\u7A0B\u7684 MCP Server \u5E76\u8C03\u7528\u83B7\u53D6\u5DE5\u5177\u5217\u8868\uFF0C\u5E76\u7EDF\u8BA1\u8C03\u7528\u8FD4\u56DE\u54CD\u5E94\u7684\u65F6\u95F4\uFF0C\u56FE\u4E2D\u7ED9\u51FA\u7684\u54CD\u5E94\u65F6\u95F4\u5BF9\u6BD4\u4E3A\u5BF9\u6570\u523B\u5EA6\uFF0CSSE Server \u5728\u5E76\u53D1\u7528\u6237\u6570\u91CF\u8F83\u591A\u65F6\u5E73\u5747\u54CD\u5E94\u65F6\u95F4\u4F1A\u4ECE0.0018s\u663E\u8457\u589E\u52A0\u52301.5112s\uFF0C\u800C Higress \u90E8\u7F72\u7684 Streamable HTTP Server \u5219\u4F9D\u7136\u7EF4\u6301\u57280.0075s\u7684\u54CD\u5E94\u65F6\u95F4\uFF0C\u4E5F\u5F97\u76CA\u4E8E Higress \u751F\u4EA7\u7EA7\u7684\u6027\u80FD\u76F8\u6BD4\u4E8E Python Starlette\u6846\u67B6\u3002</p>
<p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2025/png/141456689/1745399456061-6d4c572f-861e-49f8-8192-5da6820302b6.png" alt="" referrerpolicy="no-referrer"></p>
<p>\u6027\u80FD\u6D4B\u8BD5\u7ED3\u679C\u663E\u793A\uFF0CHigress \u90E8\u7F72\u7684Streamable HTTP \u5728\u54CD\u5E94\u65F6\u95F4\u65B9\u9762\u5177\u6709\u660E\u663E\u4F18\u52BF\uFF1A</p>
<ul>
<li>Streamable HTTP \u7684\u5E73\u5747\u54CD\u5E94\u65F6\u95F4\u66F4\u77ED\uFF0C\u54CD\u5E94\u65F6\u95F4\u6CE2\u52A8\u8F83\u5C0F\uFF0C\u968F\u5E76\u53D1\u7528\u6237\u6570\u589E\u52A0\uFF0C\u54CD\u5E94\u65F6\u95F4\u589E\u957F\u66F4\u5E73</li>
<li>HTTP + SSE \u7684\u5E73\u5747\u54CD\u5E94\u65F6\u95F4\u66F4\u957F\uFF0C\u5728\u9AD8\u5E76\u53D1\u573A\u666F\u4E0B\u54CD\u5E94\u65F6\u95F4\u6CE2\u52A8\u8F83\u5927</li>
</ul>
<h2 id="\u5BA2\u6237\u7AEF\u590D\u6742\u5EA6\u5BF9\u6BD4">\u5BA2\u6237\u7AEF\u590D\u6742\u5EA6\u5BF9\u6BD4</h2>
<p>Streamable HTTP \u652F\u6301\u65E0\u72B6\u6001\u7684\u670D\u52A1\u548C\u6709\u72B6\u6001\u7684\u670D\u52A1\uFF0C\u76EE\u524D\u7684\u5927\u90E8\u5206\u573A\u666F\u65E0\u72B6\u6001\u7684 Streamable HTTP\u7684\u53EF\u4EE5\u89E3\u51B3\uFF0C\u901A\u8FC7\u5BF9\u6BD4\u4E24\u79CD\u4F20\u8F93\u65B9\u6848\u7684\u5BA2\u6237\u7AEF\u5B9E\u73B0\u4EE3\u7801\uFF0C\u53EF\u4EE5\u76F4\u89C2\u5730\u770B\u5230\u65E0\u72B6\u6001\u7684 Streamable HTTP \u7684\u5BA2\u6237\u7AEF\u5B9E\u73B0\u7B80\u6D01\u6027\u3002</p>
<h4 id="http--sse-\u5BA2\u6237\u7AEF\u6837\u4F8B\u4EE3\u7801">HTTP + SSE \u5BA2\u6237\u7AEF\u6837\u4F8B\u4EE3\u7801</h4>
<div class="expressive-code"><link rel="stylesheet" href="/_astro/ec.1vui4.css"><script type="module" src="/_astro/ec.dy9ns.js"><\/script><figure class="frame not-content"><figcaption class="header"></figcaption><pre tabindex="0"><code><div class="ec-line"><div class="code"><span style="--0:#F97583">class</span><span style="--0:#E1E4E8"> </span><span style="--0:#B392F0">SSEClient</span><span style="--0:#E1E4E8">:</span></div></div><div class="ec-line"><div class="code"><span class="indent">    </span><span style="--0:#F97583">def</span><span style="--0:#E1E4E8"> </span><span style="--0:#79B8FF">__init__</span><span style="--0:#E1E4E8">(self, url: </span><span style="--0:#79B8FF">str</span><span style="--0:#E1E4E8">, headers: </span><span style="--0:#79B8FF">dict</span><span style="--0:#E1E4E8"> </span><span style="--0:#F97583">=</span><span style="--0:#E1E4E8"> </span><span style="--0:#79B8FF">None</span><span style="--0:#E1E4E8">):</span></div></div><div class="ec-line"><div class="code"><span class="indent">        </span><span style="--0:#79B8FF">self</span><span style="--0:#E1E4E8">.url </span><span style="--0:#F97583">=</span><span style="--0:#E1E4E8"> url</span></div></div><div class="ec-line"><div class="code"><span class="indent">        </span><span style="--0:#79B8FF">self</span><span style="--0:#E1E4E8">.headers </span><span style="--0:#F97583">=</span><span style="--0:#E1E4E8"> headers </span><span style="--0:#F97583">or</span><span style="--0:#E1E4E8"> {}</span></div></div><div class="ec-line"><div class="code"><span class="indent">        </span><span style="--0:#79B8FF">self</span><span style="--0:#E1E4E8">.event_source </span><span style="--0:#F97583">=</span><span style="--0:#E1E4E8"> </span><span style="--0:#79B8FF">None</span></div></div><div class="ec-line"><div class="code"><span class="indent">        </span><span style="--0:#79B8FF">self</span><span style="--0:#E1E4E8">.endpoint </span><span style="--0:#F97583">=</span><span style="--0:#E1E4E8"> </span><span style="--0:#79B8FF">None</span></div></div><div class="ec-line"><div class="code">
</div></div><div class="ec-line"><div class="code"><span class="indent">        </span><span style="--0:#F97583">async</span><span style="--0:#E1E4E8"> </span><span style="--0:#F97583">def</span><span style="--0:#E1E4E8"> </span><span style="--0:#B392F0">connect</span><span style="--0:#E1E4E8">(self):</span></div></div><div class="ec-line"><div class="code"><span class="indent">            </span><span style="--0:#99A0A6"># 1. \u5EFA\u7ACB SSE \u8FDE\u63A5</span></div></div><div class="ec-line"><div class="code"><span class="indent">            </span><span style="--0:#F97583">async</span><span style="--0:#E1E4E8"> </span><span style="--0:#F97583">with</span><span style="--0:#E1E4E8"> aiohttp.ClientSession(</span><span style="--0:#FFAB70">headers</span><span style="--0:#F97583">=</span><span style="--0:#79B8FF">self</span><span style="--0:#E1E4E8">.headers) </span><span style="--0:#F97583">as</span><span style="--0:#E1E4E8"> session:</span></div></div><div class="ec-line"><div class="code"><span class="indent">                </span><span style="--0:#79B8FF">self</span><span style="--0:#E1E4E8">.event_source </span><span style="--0:#F97583">=</span><span style="--0:#E1E4E8"> </span><span style="--0:#F97583">await</span><span style="--0:#E1E4E8"> session.get(</span><span style="--0:#79B8FF">self</span><span style="--0:#E1E4E8">.url)</span></div></div><div class="ec-line"><div class="code">
</div></div><div class="ec-line"><div class="code"><span class="indent">                </span><span style="--0:#99A0A6"># 2. \u5904\u7406\u8FDE\u63A5\u4E8B\u4EF6</span></div></div><div class="ec-line"><div class="code"><span class="indent">                </span><span style="--0:#79B8FF">print</span><span style="--0:#E1E4E8">(</span><span style="--0:#9ECBFF">'SSE connection established'</span><span style="--0:#E1E4E8">)</span></div></div><div class="ec-line"><div class="code">
</div></div><div class="ec-line"><div class="code"><span class="indent">                </span><span style="--0:#99A0A6"># 3. \u5904\u7406\u6D88\u606F\u4E8B\u4EF6</span></div></div><div class="ec-line"><div class="code"><span class="indent">                </span><span style="--0:#F97583">async</span><span style="--0:#E1E4E8"> </span><span style="--0:#F97583">for</span><span style="--0:#E1E4E8"> line </span><span style="--0:#F97583">in</span><span style="--0:#E1E4E8"> </span><span style="--0:#79B8FF">self</span><span style="--0:#E1E4E8">.event_source.content:</span></div></div><div class="ec-line"><div class="code"><span class="indent">                    </span><span style="--0:#F97583">if</span><span style="--0:#E1E4E8"> line:</span></div></div><div class="ec-line"><div class="code"><span class="indent"><span style="--0:#E1E4E8">                        </span></span><span style="--0:#E1E4E8">message </span><span style="--0:#F97583">=</span><span style="--0:#E1E4E8"> json.loads(line)</span></div></div><div class="ec-line"><div class="code"><span class="indent">                        </span><span style="--0:#F97583">await</span><span style="--0:#E1E4E8"> </span><span style="--0:#79B8FF">self</span><span style="--0:#E1E4E8">.handle_message(message)</span></div></div><div class="ec-line"><div class="code">
</div></div><div class="ec-line"><div class="code"><span class="indent">                        </span><span style="--0:#99A0A6"># 4. \u5904\u7406\u9519\u8BEF\u548C\u91CD\u8FDE</span></div></div><div class="ec-line"><div class="code"><span class="indent">                        </span><span style="--0:#F97583">if</span><span style="--0:#E1E4E8"> </span><span style="--0:#79B8FF">self</span><span style="--0:#E1E4E8">.event_source.status </span><span style="--0:#F97583">!=</span><span style="--0:#E1E4E8"> </span><span style="--0:#79B8FF">200</span><span style="--0:#E1E4E8">:</span></div></div><div class="ec-line"><div class="code"><span class="indent">                            </span><span style="--0:#79B8FF">print</span><span style="--0:#E1E4E8">(</span><span style="--0:#F97583">f</span><span style="--0:#9ECBFF">'SSE error: </span><span style="--0:#79B8FF">{self</span><span style="--0:#E1E4E8">.event_source.status</span><span style="--0:#79B8FF">}</span><span style="--0:#9ECBFF">'</span><span style="--0:#E1E4E8">)</span></div></div><div class="ec-line"><div class="code"><span class="indent">                            </span><span style="--0:#F97583">await</span><span style="--0:#E1E4E8"> </span><span style="--0:#79B8FF">self</span><span style="--0:#E1E4E8">.reconnect()</span></div></div><div class="ec-line"><div class="code">
</div></div><div class="ec-line"><div class="code"><span class="indent">        </span><span style="--0:#F97583">async</span><span style="--0:#E1E4E8"> </span><span style="--0:#F97583">def</span><span style="--0:#E1E4E8"> </span><span style="--0:#B392F0">send</span><span style="--0:#E1E4E8">(self, message: </span><span style="--0:#79B8FF">dict</span><span style="--0:#E1E4E8">):</span></div></div><div class="ec-line"><div class="code"><span class="indent">            </span><span style="--0:#99A0A6"># \u9700\u8981\u989D\u5916\u7684 POST \u8BF7\u6C42\u53D1\u9001\u6D88\u606F</span></div></div><div class="ec-line"><div class="code"><span class="indent">            </span><span style="--0:#F97583">async</span><span style="--0:#E1E4E8"> </span><span style="--0:#F97583">with</span><span style="--0:#E1E4E8"> aiohttp.ClientSession(</span><span style="--0:#FFAB70">headers</span><span style="--0:#F97583">=</span><span style="--0:#79B8FF">self</span><span style="--0:#E1E4E8">.headers) </span><span style="--0:#F97583">as</span><span style="--0:#E1E4E8"> session:</span></div></div><div class="ec-line"><div class="code"><span class="indent">                </span><span style="--0:#F97583">async</span><span style="--0:#E1E4E8"> </span><span style="--0:#F97583">with</span><span style="--0:#E1E4E8"> session.post(</span><span style="--0:#79B8FF">self</span><span style="--0:#E1E4E8">.endpoint, </span><span style="--0:#FFAB70">json</span><span style="--0:#F97583">=</span><span style="--0:#E1E4E8">message) </span><span style="--0:#F97583">as</span><span style="--0:#E1E4E8"> response:</span></div></div><div class="ec-line"><div class="code"><span class="indent">                    </span><span style="--0:#F97583">return</span><span style="--0:#E1E4E8"> </span><span style="--0:#F97583">await</span><span style="--0:#E1E4E8"> response.json()</span></div></div><div class="ec-line"><div class="code">
</div></div><div class="ec-line"><div class="code"><span class="indent">                </span><span style="--0:#F97583">async</span><span style="--0:#E1E4E8"> </span><span style="--0:#F97583">def</span><span style="--0:#E1E4E8"> </span><span style="--0:#B392F0">handle_message</span><span style="--0:#E1E4E8">(self, message: </span><span style="--0:#79B8FF">dict</span><span style="--0:#E1E4E8">):</span></div></div><div class="ec-line"><div class="code"><span class="indent">                    </span><span style="--0:#99A0A6"># \u5904\u7406\u63A5\u6536\u5230\u7684\u6D88\u606F</span></div></div><div class="ec-line"><div class="code"><span class="indent">                    </span><span style="--0:#79B8FF">print</span><span style="--0:#E1E4E8">(</span><span style="--0:#F97583">f</span><span style="--0:#9ECBFF">'Received message: </span><span style="--0:#79B8FF">{</span><span style="--0:#E1E4E8">message</span><span style="--0:#79B8FF">}</span><span style="--0:#9ECBFF">'</span><span style="--0:#E1E4E8">)</span></div></div><div class="ec-line"><div class="code">
</div></div><div class="ec-line"><div class="code"><span class="indent">    </span><span style="--0:#F97583">async</span><span style="--0:#E1E4E8"> </span><span style="--0:#F97583">def</span><span style="--0:#E1E4E8"> </span><span style="--0:#B392F0">reconnect</span><span style="--0:#E1E4E8">(self):</span></div></div><div class="ec-line"><div class="code"><span class="indent">        </span><span style="--0:#99A0A6"># \u5B9E\u73B0\u91CD\u8FDE\u903B\u8F91</span></div></div><div class="ec-line"><div class="code"><span class="indent">        </span><span style="--0:#79B8FF">print</span><span style="--0:#E1E4E8">(</span><span style="--0:#9ECBFF">'Attempting to reconnect...'</span><span style="--0:#E1E4E8">)</span></div></div><div class="ec-line"><div class="code"><span class="indent">        </span><span style="--0:#F97583">await</span><span style="--0:#E1E4E8"> </span><span style="--0:#79B8FF">self</span><span style="--0:#E1E4E8">.connect()</span></div></div></code></pre><div class="copy"><button title="Copy to clipboard" data-copied="Copied!" data-code="class SSEClient:\x7F    def __init__(self, url: str, headers: dict = None):\x7F        self.url = url\x7F        self.headers = headers or {}\x7F        self.event_source = None\x7F        self.endpoint = None\x7F\x7F        async def connect(self):\x7F            # 1. \u5EFA\u7ACB SSE \u8FDE\u63A5\x7F            async with aiohttp.ClientSession(headers=self.headers) as session:\x7F                self.event_source = await session.get(self.url)\x7F\x7F                # 2. \u5904\u7406\u8FDE\u63A5\u4E8B\u4EF6\x7F                print(&#x27;SSE connection established&#x27;)\x7F\x7F                # 3. \u5904\u7406\u6D88\u606F\u4E8B\u4EF6\x7F                async for line in self.event_source.content:\x7F                    if line:\x7F                        message = json.loads(line)\x7F                        await self.handle_message(message)\x7F\x7F                        # 4. \u5904\u7406\u9519\u8BEF\u548C\u91CD\u8FDE\x7F                        if self.event_source.status != 200:\x7F                            print(f&#x27;SSE error: {self.event_source.status}&#x27;)\x7F                            await self.reconnect()\x7F\x7F        async def send(self, message: dict):\x7F            # \u9700\u8981\u989D\u5916\u7684 POST \u8BF7\u6C42\u53D1\u9001\u6D88\u606F\x7F            async with aiohttp.ClientSession(headers=self.headers) as session:\x7F                async with session.post(self.endpoint, json=message) as response:\x7F                    return await response.json()\x7F\x7F                async def handle_message(self, message: dict):\x7F                    # \u5904\u7406\u63A5\u6536\u5230\u7684\u6D88\u606F\x7F                    print(f&#x27;Received message: {message}&#x27;)\x7F\x7F    async def reconnect(self):\x7F        # \u5B9E\u73B0\u91CD\u8FDE\u903B\u8F91\x7F        print(&#x27;Attempting to reconnect...&#x27;)\x7F        await self.connect()"><div></div></button></div></figure></div>
<h4 id="streamable-http-\u5BA2\u6237\u7AEF\u6837\u4F8B\u4EE3\u7801">Streamable HTTP \u5BA2\u6237\u7AEF\u6837\u4F8B\u4EE3\u7801</h4>
<div class="expressive-code"><figure class="frame not-content"><figcaption class="header"></figcaption><pre tabindex="0"><code><div class="ec-line"><div class="code"><span style="--0:#F97583">class</span><span style="--0:#E1E4E8"> </span><span style="--0:#B392F0">StreamableHTTPClient</span><span style="--0:#E1E4E8">:</span></div></div><div class="ec-line"><div class="code"><span class="indent">    </span><span style="--0:#F97583">def</span><span style="--0:#E1E4E8"> </span><span style="--0:#79B8FF">__init__</span><span style="--0:#E1E4E8">(self, url: </span><span style="--0:#79B8FF">str</span><span style="--0:#E1E4E8">, headers: </span><span style="--0:#79B8FF">dict</span><span style="--0:#E1E4E8"> </span><span style="--0:#F97583">=</span><span style="--0:#E1E4E8"> </span><span style="--0:#79B8FF">None</span><span style="--0:#E1E4E8">):</span></div></div><div class="ec-line"><div class="code"><span class="indent">        </span><span style="--0:#79B8FF">self</span><span style="--0:#E1E4E8">.url </span><span style="--0:#F97583">=</span><span style="--0:#E1E4E8"> url</span></div></div><div class="ec-line"><div class="code"><span class="indent">        </span><span style="--0:#79B8FF">self</span><span style="--0:#E1E4E8">.headers </span><span style="--0:#F97583">=</span><span style="--0:#E1E4E8"> headers </span><span style="--0:#F97583">or</span><span style="--0:#E1E4E8"> {}</span></div></div><div class="ec-line"><div class="code">
</div></div><div class="ec-line"><div class="code"><span class="indent">    </span><span style="--0:#F97583">async</span><span style="--0:#E1E4E8"> </span><span style="--0:#F97583">def</span><span style="--0:#E1E4E8"> </span><span style="--0:#B392F0">send</span><span style="--0:#E1E4E8">(self, message: </span><span style="--0:#79B8FF">dict</span><span style="--0:#E1E4E8">):</span></div></div><div class="ec-line"><div class="code"><span class="indent">        </span><span style="--0:#99A0A6"># 1. \u53D1\u9001 POST \u8BF7\u6C42</span></div></div><div class="ec-line"><div class="code"><span class="indent">        </span><span style="--0:#F97583">async</span><span style="--0:#E1E4E8"> </span><span style="--0:#F97583">with</span><span style="--0:#E1E4E8"> aiohttp.ClientSession(</span><span style="--0:#FFAB70">headers</span><span style="--0:#F97583">=</span><span style="--0:#79B8FF">self</span><span style="--0:#E1E4E8">.headers) </span><span style="--0:#F97583">as</span><span style="--0:#E1E4E8"> session:</span></div></div><div class="ec-line"><div class="code"><span class="indent">            </span><span style="--0:#F97583">async</span><span style="--0:#E1E4E8"> </span><span style="--0:#F97583">with</span><span style="--0:#E1E4E8"> session.post( </span><span style="--0:#79B8FF">self</span><span style="--0:#E1E4E8">.url, </span><span style="--0:#FFAB70">json</span><span style="--0:#F97583">=</span><span style="--0:#E1E4E8">message,</span></div></div><div class="ec-line"><div class="code"><span class="indent">                </span><span style="--0:#FFAB70">headers</span><span style="--0:#F97583">=</span><span style="--0:#E1E4E8">{</span><span style="--0:#9ECBFF">'Content-Type'</span><span style="--0:#E1E4E8">: </span><span style="--0:#9ECBFF">'application/json'</span><span style="--0:#E1E4E8">}</span></div></div><div class="ec-line"><div class="code"><span class="indent"><span style="--0:#E1E4E8">            </span></span><span style="--0:#E1E4E8">) </span><span style="--0:#F97583">as</span><span style="--0:#E1E4E8"> response:</span></div></div><div class="ec-line"><div class="code"><span class="indent">                </span><span style="--0:#99A0A6"># 2. \u5904\u7406\u54CD\u5E94</span></div></div><div class="ec-line"><div class="code"><span class="indent">                </span><span style="--0:#F97583">if</span><span style="--0:#E1E4E8"> response.status </span><span style="--0:#F97583">==</span><span style="--0:#E1E4E8"> </span><span style="--0:#79B8FF">200</span><span style="--0:#E1E4E8">:</span></div></div><div class="ec-line"><div class="code"><span class="indent">                    </span><span style="--0:#F97583">return</span><span style="--0:#E1E4E8"> </span><span style="--0:#F97583">await</span><span style="--0:#E1E4E8"> response.json()</span></div></div><div class="ec-line"><div class="code"><span class="indent">                </span><span style="--0:#F97583">else</span><span style="--0:#E1E4E8">:</span></div></div><div class="ec-line"><div class="code"><span class="indent">                    </span><span style="--0:#F97583">raise</span><span style="--0:#E1E4E8"> </span><span style="--0:#79B8FF">Exception</span><span style="--0:#E1E4E8">(</span><span style="--0:#F97583">f</span><span style="--0:#9ECBFF">'HTTP error: </span><span style="--0:#79B8FF">{</span><span style="--0:#E1E4E8">response.status</span><span style="--0:#79B8FF">}</span><span style="--0:#9ECBFF">'</span><span style="--0:#E1E4E8">)</span></div></div></code></pre><div class="copy"><button title="Copy to clipboard" data-copied="Copied!" data-code="class StreamableHTTPClient:\x7F    def __init__(self, url: str, headers: dict = None):\x7F        self.url = url\x7F        self.headers = headers or {}\x7F\x7F    async def send(self, message: dict):\x7F        # 1. \u53D1\u9001 POST \u8BF7\u6C42\x7F        async with aiohttp.ClientSession(headers=self.headers) as session:\x7F            async with session.post( self.url, json=message,\x7F                headers={&#x27;Content-Type&#x27;: &#x27;application/json&#x27;}\x7F            ) as response:\x7F                # 2. \u5904\u7406\u54CD\u5E94\x7F                if response.status == 200:\x7F                    return await response.json()\x7F                else:\x7F                    raise Exception(f&#x27;HTTP error: {response.status}&#x27;)"><div></div></button></div></figure></div>
<p>\u4ECE\u4EE3\u7801\u5BF9\u6BD4\u53EF\u4EE5\u770B\u51FA\uFF1A</p>
<ol>
<li>\u590D\u6742\u5EA6\uFF1AStreamable HTTP \u65E0\u9700\u5904\u7406\u8FDE\u63A5\u7EF4\u62A4\u3001\u91CD\u8FDE\u7B49\u590D\u6742\u903B\u8F91</li>
<li>\u53EF\u7EF4\u62A4\u6027\uFF1AStreamable HTTP \u4EE3\u7801\u7ED3\u6784\u66F4\u6E05\u6670\uFF0C\u66F4\u6613\u4E8E\u7EF4\u62A4\u548C\u8C03\u8BD5</li>
<li>\u9519\u8BEF\u5904\u7406\uFF1AStreamable HTTP \u7684\u9519\u8BEF\u5904\u7406\u66F4\u76F4\u63A5\uFF0C\u65E0\u9700\u8003\u8651\u8FDE\u63A5\u72B6\u6001</li>
</ol>
<p><em>\u30101\u3011PR #206</em></p>
<p><em><a href="https://github.com/modelcontextprotocol/modelcontextprotocol/pull/206" referrerpolicy="unsafe-url" rel="nofollow" target="_blank">https://github.com/modelcontextprotocol/modelcontextprotocol/pull/206</a></em></p>
<p><em>\u30102\u3011GitHUB MCP Server</em></p>
<p><em><a href="https://github.com/modelcontextprotocol/servers/tree/main/src/github" referrerpolicy="unsafe-url" rel="nofollow" target="_blank">https://github.com/modelcontextprotocol/servers/tree/main/src/github</a></em></p>`,n={title:"MCP \u534F\u8BAE\uFF1A\u4E3A\u4EC0\u4E48 Streamable HTTP \u662F\u6700\u4F73\u9009\u62E9\uFF1F",description:"MCP \u534F\u8BAE\uFF1A\u4E3A\u4EC0\u4E48 Streamable HTTP \u662F\u6700\u4F73\u9009\u62E9\uFF1F",date:"2025-04-25",category:"article",keywords:["Higress"],authors:"CH3CHO"},a="/home/runner/work/higress-group.github.io/higress-group.github.io/src/content/blog/Higress-gvr7dx_awbbpb_vt50nsm76qkpi78w.md",t=void 0,r=function(){return`
MCP\uFF08Model Context Protocol\uFF09\u534F\u8BAE\u662F\u4E00\u4E2A\u7528\u4E8E AI \u6A21\u578B\u548C\u5DE5\u5177\u4E4B\u95F4\u901A\u4FE1\u7684\u6807\u51C6\u534F\u8BAE\u3002\u968F\u7740 AI \u5E94\u7528\u53D8\u5F97\u8D8A\u6765\u8D8A\u590D\u6742\u5E76\u88AB\u5E7F\u6CDB\u90E8\u7F72\uFF0C\u539F\u6709\u7684\u901A\u4FE1\u673A\u5236\u9762\u4E34\u7740\u4E00\u7CFB\u5217\u6311\u6218\u3002\u8FD1\u671F MCP \u4ED3\u5E93\u7684 [PR #206](https://github.com/modelcontextprotocol/modelcontextprotocol/pull/206) *[1]* \u5F15\u5165\u4E86\u4E00\u4E2A\u5168\u65B0\u7684 Streamable HTTP \u4F20\u8F93\u5C42\u66FF\u4EE3\u539F\u6709\u7684 HTTP+SSE \u4F20\u8F93\u5C42\u3002\u672C\u6587\u5C06\u8BE6\u7EC6\u5206\u6790\u8BE5\u534F\u8BAE\u7684\u6280\u672F\u7EC6\u8282\u548C\u5B9E\u9645\u4F18\u52BF\u3002

## \u8981\u70B9\u901F\u89C8
+ Streamable HTTP \u76F8\u6BD4 HTTP + SSE \u5177\u6709\u66F4\u597D\u7684\u7A33\u5B9A\u6027\uFF0C\u5728\u9AD8\u5E76\u53D1\u573A\u666F\u4E0B\u8868\u73B0\u66F4\u4F18\u3002
+ Streamable HTTP \u5728\u6027\u80FD\u65B9\u9762\u76F8\u6BD4 HTTP + SSE \u5177\u6709\u660E\u663E\u4F18\u52BF\uFF0C\u54CD\u5E94\u65F6\u95F4\u66F4\u77ED\u4E14\u66F4\u7A33\u5B9A\u3002
+ Streamable HTTP \u5BA2\u6237\u7AEF\u5B9E\u73B0\u76F8\u6BD4 HTTP + SSE \u66F4\u7B80\u5355\uFF0C\u4EE3\u7801\u91CF\u66F4\u5C11\uFF0C\u7EF4\u62A4\u6210\u672C\u66F4\u4F4E\u3002

## \u4E3A\u4EC0\u4E48\u9009\u62E9 Streamable HTTP?
![](https://intranetproxy.alipay.com/skylark/lark/0/2025/png/141456689/1745394032558-45a9789a-e07a-4ecb-a8b5-3629197d9b4b.png)

### HTTP + SSE \u5B58\u5728\u7684\u95EE\u9898
HTTP+SSE\u7684\u4F20\u8F93\u8FC7\u7A0B\u5B9E\u73B0\u4E2D\uFF0C\u5BA2\u6237\u7AEF\u548C\u670D\u52A1\u5668\u901A\u8FC7\u4E24\u4E2A\u4E3B\u8981\u6E20\u9053\u8FDB\u884C\u901A\u4FE1\uFF1A\uFF081\uFF09HTTP \u8BF7\u6C42/\u54CD\u5E94\uFF1A\u5BA2\u6237\u7AEF\u901A\u8FC7\u6807\u51C6\u7684 HTTP \u8BF7\u6C42\u5411\u670D\u52A1\u5668\u53D1\u9001\u6D88\u606F\u3002 \uFF082\uFF09\u670D\u52A1\u5668\u53D1\u9001\u4E8B\u4EF6\uFF08SSE\uFF09\uFF1A\u670D\u52A1\u5668\u901A\u8FC7\u4E13\u95E8\u7684 /sse \u7AEF\u70B9\u5411\u5BA2\u6237\u7AEF\u63A8\u9001\u6D88\u606F\uFF0C\u8FD9\u5C31\u5BFC\u81F4\u5B58\u5728\u4E0B\u9762\u4E09\u4E2A\u95EE\u9898\uFF1A

+ **\u670D\u52A1\u5668\u5FC5\u987B\u7EF4\u62A4\u957F\u8FDE\u63A5**\uFF0C\u5728\u9AD8\u5E76\u53D1\u60C5\u51B5\u4E0B\u4F1A\u5BFC\u81F4\u663E\u8457\u7684\u8D44\u6E90\u6D88\u8017\u3002
+ **\u670D\u52A1\u5668\u6D88\u606F\u53EA\u80FD\u901A\u8FC7 SSE \u4F20\u9012**\uFF0C\u9020\u6210\u4E86\u4E0D\u5FC5\u8981\u7684\u590D\u6742\u6027\u548C\u5F00\u9500\u3002
+ **\u57FA\u7840\u67B6\u6784\u517C\u5BB9\u6027**\uFF0C\u8BB8\u591A\u73B0\u6709\u7684\u7F51\u7EDC\u57FA\u7840\u67B6\u6784\u53EF\u80FD\u65E0\u6CD5\u6B63\u786E\u5904\u7406\u957F\u671F\u7684 SSE \u8FDE\u63A5\u3002\u4F01\u4E1A\u9632\u706B\u5899\u53EF\u80FD\u4F1A\u5F3A\u5236\u7EC8\u6B62\u8D85\u65F6\u8FDE\u63A5\uFF0C\u5BFC\u81F4\u670D\u52A1\u4E0D\u53EF\u9760\u3002

### Streamable HTTP \u7684\u6539\u8FDB
Streamable HTTP \u662F MCP \u534F\u8BAE\u7684\u4E00\u6B21\u91CD\u8981\u5347\u7EA7\uFF0C\u901A\u8FC7\u4E0B\u9762\u7684\u6539\u8FDB\u89E3\u51B3\u4E86\u539F\u6709 HTTP + SSE \u4F20\u8F93\u65B9\u5F0F\u7684\u591A\u4E2A\u5173\u952E\u95EE\u9898\uFF1A

+ **\u7EDF\u4E00\u7AEF\u70B9**\uFF1A\u79FB\u9664\u4E86\u4E13\u95E8\u5EFA\u7ACB\u8FDE\u63A5\u7684 /sse \u7AEF\u70B9\uFF0C\u5C06\u6240\u6709\u901A\u4FE1\u6574\u5408\u5230\u7EDF\u4E00\u7684\u7AEF\u70B9\u3002
+ **\u6309\u9700\u6D41\u5F0F\u4F20\u8F93**\uFF1A\u670D\u52A1\u5668\u53EF\u4EE5\u7075\u6D3B\u9009\u62E9\u8FD4\u56DE\u6807\u51C6 HTTP \u54CD\u5E94\u6216\u901A\u8FC7 SSE \u6D41\u5F0F\u8FD4\u56DE\u3002
+ **\u72B6\u6001\u7BA1\u7406**\uFF1A\u5F15\u5165session\u673A\u5236\u4EE5\u652F\u6301\u72B6\u6001\u7BA1\u7406\u548C\u6062\u590D\u3002

## HTTP + SSE vs Streamable HTTP
\u4E0B\u9762\u901A\u8FC7\u5B9E\u9645\u5E94\u7528\u573A\u666F\u4E2D\u7A33\u5B9A\u6027\uFF0C\u6027\u80FD\u548C\u5BA2\u6237\u7AEF\u590D\u6742\u5EA6\u4E09\u4E2A\u89D2\u5EA6\u5BF9\u6BD4\u8BF4\u660E Streamable HTTP \u76F8\u6BD4 HTTP + SSE\u7684\u4F18\u52BF\uFF0CAI \u7F51\u5173 Higress \u76EE\u524D\u5DF2\u7ECF\u652F\u6301\u4E86 Streamable HTTP \u534F\u8BAE\uFF0C\u901A\u8FC7 MCP \u5B98\u65B9 Python SDK \u7684\u6837\u4F8B Server \u90E8\u7F72\u4E86\u4E00\u4E2A HTTP + SSE \u534F\u8BAE\u7684 MCP Server\uFF0C\u901A\u8FC7 Higress \u90E8\u7F72\u4E86\u4E00\u4E2A Streamable HTTP \u534F\u8BAE\u7684MCP Server\u3002

## \u7A33\u5B9A\u6027\u5BF9\u6BD4
### TCP \u8FDE\u63A5\u6570\u5BF9\u6BD4
\u5229\u7528Python\u7A0B\u5E8F\u6A21\u62DF1000\u4E2A\u7528\u6237\u540C\u65F6\u5E76\u53D1\u8BBF\u95EE\u8FDC\u7A0B\u7684MCP Server\u5E76\u8C03\u7528\u83B7\u53D6\u5DE5\u5177\u5217\u8868\uFF0C\u56FE\u4E2D\u53EF\u4EE5\u770B\u51FA SSE Server\u7684 SSE \u8FDE\u63A5\u65E0\u6CD5\u590D\u7528\u4E14\u9700\u8981\u957F\u671F\u7EF4\u62A4\uFF0C\u9AD8\u5E76\u53D1\u7684\u9700\u6C42\u4E5F\u4F1A\u5E26\u6765 TCP \u8FDE\u63A5\u6570\u7684\u7A81\u589E\uFF0C\u800C Streamable HTTP \u534F\u8BAE\u5219\u53EF\u4EE5\u76F4\u63A5\u8FD4\u56DE\u54CD\u5E94\uFF0C\u591A\u4E2A\u8BF7\u6C42\u53EF\u4EE5\u590D\u7528\u540C\u4E00\u4E2A TCP \u8FDE\u63A5\uFF0CTCP\u8FDE\u63A5\u6570\u6700\u9AD8\u53EA\u5230\u51E0\u5341\u6761\uFF0C\u5E76\u4E14\u6574\u4F53\u6267\u884C\u65F6\u95F4\u4E5F\u53EA\u6709SSE Server \u7684\u56DB\u5206\u4E4B\u4E00\u3002 

![](https://intranetproxy.alipay.com/skylark/lark/0/2025/png/141456689/1745398582733-5f9ba81c-8f2d-45fe-bd52-aa6ea75080e4.png)

\u57281000\u4E2A\u5E76\u53D1\u7528\u6237\u7684\u6D4B\u8BD5\u573A\u666F\u4E0B\uFF0CHigress \u90E8\u7F72\u7684 Streamable HTTP \u65B9\u6848\u7684 TCP \u8FDE\u63A5\u6570\u660E\u663E\u4F4E\u4E8E HTTP + SSE \u65B9\u6848\uFF1A

+ HTTP + SSE\uFF1A\u9700\u8981\u7EF4\u6301\u5927\u91CF\u957F\u8FDE\u63A5\uFF0CTCP\u8FDE\u63A5\u6570\u968F\u65F6\u95F4\u6301\u7EED\u589E\u957F
+ Streamable HTTP\uFF1A\u6309\u9700\u5EFA\u7ACB\u8FDE\u63A5\uFF0CTCP\u8FDE\u63A5\u6570\u7EF4\u6301\u5728\u8F83\u4F4E\u6C34\u5E73

### \u8BF7\u6C42\u6210\u529F\u7387\u5BF9\u6BD4
\u5B9E\u9645\u5E94\u7528\u573A\u666F\u4E2D\u8FDB\u7A0B\u7EA7\u522B\u901A\u5E38\u4F1A\u9650\u5236\u6700\u5927\u8FDE\u63A5\u6570\uFF0Clinux\u9ED8\u8BA4\u901A\u5E38\u662F1024\u3002\u5229\u7528Python\u7A0B\u5E8F\u6A21\u62DF\u4E0D\u540C\u6570\u91CF\u7684\u7528\u6237\u8BBF\u95EE\u8FDC\u7A0B\u7684MCP Server\u5E76\u8C03\u7528\u83B7\u53D6\u5DE5\u5177\u5217\u8868\uFF0CSSE Server\u5728\u5E76\u53D1\u8BF7\u6C42\u6570\u5230\u8FBE\u6700\u5927\u8FDE\u63A5\u6570\u9650\u5236\u540E\uFF0C\u6210\u529F\u7387\u4F1A\u6781\u901F\u4E0B\u964D\uFF0C\u5927\u91CF\u7684\u5E76\u53D1\u8BF7\u6C42\u65E0\u6CD5\u5EFA\u7ACB\u65B0\u7684 SSE \u8FDE\u63A5\u800C\u8BBF\u95EE\u5931\u8D25\u3002

![](https://intranetproxy.alipay.com/skylark/lark/0/2025/png/141456689/1745392826151-8ed104e6-87aa-4fbc-a024-5afa57091139.png)

\u5728\u4E0D\u540C\u5E76\u53D1\u7528\u6237\u6570\u4E0B\u7684\u8BF7\u6C42\u6210\u529F\u7387\u6D4B\u8BD5\u4E2D\uFF0CHigress \u90E8\u7F72\u7684 Streamable HTTP \u7684\u6210\u529F\u7387\u663E\u8457\u9AD8\u4E8E HTTP + SSE \u65B9\u6848\uFF1A

+ HTTP + SSE\uFF1A\u968F\u7740\u5E76\u53D1\u7528\u6237\u6570\u589E\u52A0\uFF0C\u6210\u529F\u7387\u663E\u8457\u4E0B\u964D
+ Streamable HTTP\uFF1A\u5373\u4F7F\u5728\u9AD8\u5E76\u53D1\u573A\u666F\u4E0B\u4ECD\u80FD\u4FDD\u6301\u8F83\u9AD8\u7684\u8BF7\u6C42\u6210\u529F\u7387

## \u6027\u80FD\u5BF9\u6BD4
> \u8FD9\u91CC\u5BF9\u6BD4\u7684\u662F\u793E\u533A  Python \u7248\u672C\u7684 [GitHUB MCP Server](https://github.com/modelcontextprotocol/servers/tree/main/src/github) _ [2]_\u548C Higress MCP \u5E02\u573A\u7684[ GitHUB MCP Server](https://mcp.higress.ai/server/server0011)
>

\u5229\u7528 Python \u7A0B\u5E8F\u6A21\u62DF\u4E0D\u540C\u6570\u91CF\u7684\u7528\u6237\u540C\u65F6\u5E76\u53D1\u8BBF\u95EE\u8FDC\u7A0B\u7684 MCP Server \u5E76\u8C03\u7528\u83B7\u53D6\u5DE5\u5177\u5217\u8868\uFF0C\u5E76\u7EDF\u8BA1\u8C03\u7528\u8FD4\u56DE\u54CD\u5E94\u7684\u65F6\u95F4\uFF0C\u56FE\u4E2D\u7ED9\u51FA\u7684\u54CD\u5E94\u65F6\u95F4\u5BF9\u6BD4\u4E3A\u5BF9\u6570\u523B\u5EA6\uFF0CSSE Server \u5728\u5E76\u53D1\u7528\u6237\u6570\u91CF\u8F83\u591A\u65F6\u5E73\u5747\u54CD\u5E94\u65F6\u95F4\u4F1A\u4ECE0.0018s\u663E\u8457\u589E\u52A0\u52301.5112s\uFF0C\u800C Higress \u90E8\u7F72\u7684 Streamable HTTP Server \u5219\u4F9D\u7136\u7EF4\u6301\u57280.0075s\u7684\u54CD\u5E94\u65F6\u95F4\uFF0C\u4E5F\u5F97\u76CA\u4E8E Higress \u751F\u4EA7\u7EA7\u7684\u6027\u80FD\u76F8\u6BD4\u4E8E Python Starlette\u6846\u67B6\u3002

![](https://intranetproxy.alipay.com/skylark/lark/0/2025/png/141456689/1745399456061-6d4c572f-861e-49f8-8192-5da6820302b6.png)

\u6027\u80FD\u6D4B\u8BD5\u7ED3\u679C\u663E\u793A\uFF0CHigress \u90E8\u7F72\u7684Streamable HTTP \u5728\u54CD\u5E94\u65F6\u95F4\u65B9\u9762\u5177\u6709\u660E\u663E\u4F18\u52BF\uFF1A

+ Streamable HTTP \u7684\u5E73\u5747\u54CD\u5E94\u65F6\u95F4\u66F4\u77ED\uFF0C\u54CD\u5E94\u65F6\u95F4\u6CE2\u52A8\u8F83\u5C0F\uFF0C\u968F\u5E76\u53D1\u7528\u6237\u6570\u589E\u52A0\uFF0C\u54CD\u5E94\u65F6\u95F4\u589E\u957F\u66F4\u5E73
+ HTTP + SSE \u7684\u5E73\u5747\u54CD\u5E94\u65F6\u95F4\u66F4\u957F\uFF0C\u5728\u9AD8\u5E76\u53D1\u573A\u666F\u4E0B\u54CD\u5E94\u65F6\u95F4\u6CE2\u52A8\u8F83\u5927

## \u5BA2\u6237\u7AEF\u590D\u6742\u5EA6\u5BF9\u6BD4
Streamable HTTP \u652F\u6301\u65E0\u72B6\u6001\u7684\u670D\u52A1\u548C\u6709\u72B6\u6001\u7684\u670D\u52A1\uFF0C\u76EE\u524D\u7684\u5927\u90E8\u5206\u573A\u666F\u65E0\u72B6\u6001\u7684 Streamable HTTP\u7684\u53EF\u4EE5\u89E3\u51B3\uFF0C\u901A\u8FC7\u5BF9\u6BD4\u4E24\u79CD\u4F20\u8F93\u65B9\u6848\u7684\u5BA2\u6237\u7AEF\u5B9E\u73B0\u4EE3\u7801\uFF0C\u53EF\u4EE5\u76F4\u89C2\u5730\u770B\u5230\u65E0\u72B6\u6001\u7684 Streamable HTTP \u7684\u5BA2\u6237\u7AEF\u5B9E\u73B0\u7B80\u6D01\u6027\u3002

#### HTTP + SSE \u5BA2\u6237\u7AEF\u6837\u4F8B\u4EE3\u7801
\`\`\`python
class SSEClient:
    def __init__(self, url: str, headers: dict = None):
        self.url = url
        self.headers = headers or {}
        self.event_source = None
        self.endpoint = None

        async def connect(self):
            # 1. \u5EFA\u7ACB SSE \u8FDE\u63A5
            async with aiohttp.ClientSession(headers=self.headers) as session:
                self.event_source = await session.get(self.url)

                # 2. \u5904\u7406\u8FDE\u63A5\u4E8B\u4EF6
                print('SSE connection established')

                # 3. \u5904\u7406\u6D88\u606F\u4E8B\u4EF6
                async for line in self.event_source.content:
                    if line:
                        message = json.loads(line)
                        await self.handle_message(message)

                        # 4. \u5904\u7406\u9519\u8BEF\u548C\u91CD\u8FDE
                        if self.event_source.status != 200:
                            print(f'SSE error: {self.event_source.status}')
                            await self.reconnect()

        async def send(self, message: dict):
            # \u9700\u8981\u989D\u5916\u7684 POST \u8BF7\u6C42\u53D1\u9001\u6D88\u606F
            async with aiohttp.ClientSession(headers=self.headers) as session:
                async with session.post(self.endpoint, json=message) as response:
                    return await response.json()

                async def handle_message(self, message: dict):
                    # \u5904\u7406\u63A5\u6536\u5230\u7684\u6D88\u606F
                    print(f'Received message: {message}')

    async def reconnect(self):
        # \u5B9E\u73B0\u91CD\u8FDE\u903B\u8F91
        print('Attempting to reconnect...')
        await self.connect()
\`\`\`

#### Streamable HTTP \u5BA2\u6237\u7AEF\u6837\u4F8B\u4EE3\u7801
\`\`\`python
class StreamableHTTPClient:
    def __init__(self, url: str, headers: dict = None):
        self.url = url
        self.headers = headers or {}
        
    async def send(self, message: dict):
        # 1. \u53D1\u9001 POST \u8BF7\u6C42
        async with aiohttp.ClientSession(headers=self.headers) as session:
            async with session.post( self.url, json=message,
                headers={'Content-Type': 'application/json'}
            ) as response:
                # 2. \u5904\u7406\u54CD\u5E94
                if response.status == 200:
                    return await response.json()
                else:
                    raise Exception(f'HTTP error: {response.status}')
\`\`\`

\u4ECE\u4EE3\u7801\u5BF9\u6BD4\u53EF\u4EE5\u770B\u51FA\uFF1A

1. \u590D\u6742\u5EA6\uFF1AStreamable HTTP \u65E0\u9700\u5904\u7406\u8FDE\u63A5\u7EF4\u62A4\u3001\u91CD\u8FDE\u7B49\u590D\u6742\u903B\u8F91
2. \u53EF\u7EF4\u62A4\u6027\uFF1AStreamable HTTP \u4EE3\u7801\u7ED3\u6784\u66F4\u6E05\u6670\uFF0C\u66F4\u6613\u4E8E\u7EF4\u62A4\u548C\u8C03\u8BD5
3. \u9519\u8BEF\u5904\u7406\uFF1AStreamable HTTP \u7684\u9519\u8BEF\u5904\u7406\u66F4\u76F4\u63A5\uFF0C\u65E0\u9700\u8003\u8651\u8FDE\u63A5\u72B6\u6001



_\u30101\u3011PR #206_

_https://github.com/modelcontextprotocol/modelcontextprotocol/pull/206_

_\u30102\u3011GitHUB MCP Server_

_https://github.com/modelcontextprotocol/servers/tree/main/src/github_


`},p=function(){return s},i=function(){return[{depth:2,slug:"\u8981\u70B9\u901F\u89C8",text:"\u8981\u70B9\u901F\u89C8"},{depth:2,slug:"\u4E3A\u4EC0\u4E48\u9009\u62E9-streamable-http",text:"\u4E3A\u4EC0\u4E48\u9009\u62E9 Streamable HTTP?"},{depth:3,slug:"http--sse-\u5B58\u5728\u7684\u95EE\u9898",text:"HTTP + SSE \u5B58\u5728\u7684\u95EE\u9898"},{depth:3,slug:"streamable-http-\u7684\u6539\u8FDB",text:"Streamable HTTP \u7684\u6539\u8FDB"},{depth:2,slug:"http--sse-vs-streamable-http",text:"HTTP + SSE vs Streamable HTTP"},{depth:2,slug:"\u7A33\u5B9A\u6027\u5BF9\u6BD4",text:"\u7A33\u5B9A\u6027\u5BF9\u6BD4"},{depth:3,slug:"tcp-\u8FDE\u63A5\u6570\u5BF9\u6BD4",text:"TCP \u8FDE\u63A5\u6570\u5BF9\u6BD4"},{depth:3,slug:"\u8BF7\u6C42\u6210\u529F\u7387\u5BF9\u6BD4",text:"\u8BF7\u6C42\u6210\u529F\u7387\u5BF9\u6BD4"},{depth:2,slug:"\u6027\u80FD\u5BF9\u6BD4",text:"\u6027\u80FD\u5BF9\u6BD4"},{depth:2,slug:"\u5BA2\u6237\u7AEF\u590D\u6742\u5EA6\u5BF9\u6BD4",text:"\u5BA2\u6237\u7AEF\u590D\u6742\u5EA6\u5BF9\u6BD4"},{depth:4,slug:"http--sse-\u5BA2\u6237\u7AEF\u6837\u4F8B\u4EE3\u7801",text:"HTTP + SSE \u5BA2\u6237\u7AEF\u6837\u4F8B\u4EE3\u7801"},{depth:4,slug:"streamable-http-\u5BA2\u6237\u7AEF\u6837\u4F8B\u4EE3\u7801",text:"Streamable HTTP \u5BA2\u6237\u7AEF\u6837\u4F8B\u4EE3\u7801"}]},e=d((T,F,h)=>{const{layout:m,...l}=n;return l.file=a,l.url=t,o`${E()}${y(s)}`})});export{e as Content,f as __tla,p as compiledContent,e as default,a as file,n as frontmatter,i as getHeadings,r as rawContent,t as url};
